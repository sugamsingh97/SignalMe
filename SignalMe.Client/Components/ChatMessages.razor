@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<MudPaper Elevation="0" Class="chat-list" Outlined="false" style="height: 70vh;">
    @if (messages != null)
    {
        @foreach (var message in messages)
        {
            @if (message.SenderId == ReceiverId)
            {
                <ReceiverBubble MessageContent="@message.Content" SendDate="@message.CreatedDate" />
            }
            else
            {
                <SenderBubble MessageContent="@message.Content" SendDate="@message.CreatedDate" />
            }
        }
    }
</MudPaper>

<style>
    .chat-list {
        display: flex;
        flex-direction: column;
        height: 70vh;
        overflow-y: auto;
    }
</style>

@code {
    [Parameter]
    public string ReceiverId { get; set; } = "";
    private HubConnection hubConnection;
    public List<ClientMessage> messages = new();
    private int currentConversationId;

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-list");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(ReceiverId))
        {
            if (hubConnection == null)
            {
                hubConnection = new HubConnectionBuilder()
                    .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
                    .Build();

                hubConnection.On<ClientMessage>("ReceiveMessage", async (message) =>
                {
                    if (message.ConversationId == currentConversationId)
                    {
                        messages.Add(message);
                        await InvokeAsync(async () =>
                        {
                            StateHasChanged();
                            await ScrollToBottom();
                        });
                    }
                });
                await hubConnection.StartAsync();
            }
            await LoadMessages();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.scrollToBottom = function (className) {
                    const element = document.getElementsByClassName(className)[0];
                    if (element) {
                        element.scrollTop = element.scrollHeight;
                    }
                }
            ");
        }
    }
    private async Task LoadMessages()
    {
        if (hubConnection is not null)
        {
            List<ClientMessage> _messages = new();
            _messages = await hubConnection.InvokeAsync<List<ClientMessage>>("GetConversationMessages", ReceiverId);
            var conversation = await hubConnection.InvokeAsync<ClientConversation>("GetOrCreateConversation", ReceiverId);
            currentConversationId = conversation.Id;
            messages = _messages;
            StateHasChanged();
            await ScrollToBottom();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
