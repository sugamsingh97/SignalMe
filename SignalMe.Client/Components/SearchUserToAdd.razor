@inject SignalMeServices SignalMeServices;
<MudAutocomplete T="AppUser"
                 class="search"
                 Underline="false"
                 Placeholder="Search Users"
                 @bind-Value="selectedUser"
                 SearchFunc="@SearchUsers"
                 ToStringFunc="@(user => user == null ? null : $"{user.FirstName} {user.LastName} ({user.Email})")"
                 AdornmentIcon="@Icons.Material.Outlined.PersonSearch">
    <ItemTemplate Context="user">
        <MudItem Style="width:100%" @onclick="()=>ContactSelect(user)">
            <MudText>@user.FirstName @user.LastName @user.Email</MudText>
        </MudItem>
    </ItemTemplate>
</MudAutocomplete>

<style>
    .search {
        border: 1px solid #0000001e;
        border-radius: 124px;
        padding-left: 10px;
        padding-right: 8px;
        padding-top: 4px;
        margin-top: 8px;
    }
</style>

@code {
    public List<AppUser> users { get; set; } = new();
    private AppUser selectedUser;

    protected async override Task OnInitializedAsync()
    {
        //users = await ProjectService.GetUserList();
        users = await SignalMeServices.GetUserList();
    }

    private async Task<IEnumerable<AppUser>> SearchUsers(string searchText, CancellationToken cancellationToken)
    {
        // Simulate some async work to demonstrate cancellation
        await Task.Delay(50, cancellationToken);

        return string.IsNullOrEmpty(searchText)
            ? users
            : users.Where(user =>
                user.FirstName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                user.LastName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                user.Email.Contains(searchText, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task ContactSelect(AppUser _user)
    {
        // UserResponse newContact = new();
        // newContact = _user;
        // await ProjectService.AddNewContact(newContact);
    }
}

