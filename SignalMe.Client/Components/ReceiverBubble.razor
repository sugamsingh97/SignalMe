@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager

<MudPaper Elevation="0" class="d-flex flex-row mx-4 my-1">
    <MudAvatar Class="mr-2" Color="Color.Tertiary" Size="Size.Medium" Variant="Variant.Filled">
        <MudIcon style="fill: #ffffff" Icon="@Icons.Material.Rounded.Person" />
    </MudAvatar>
    <MudPaper Elevation="0"
              style="background: #f5f5f5;
                 border-radius: 14px;
                 max-width: 55%;
                 width: fit-content;
                 align-self:flex-start"
              Class="pa-3 mr-4">
        <MudText Typo="Typo.body2">@MessageContent</MudText>
        <MudPaper Elevation="0" style="background: none; align-items: self-end;" class="d-flex justify-end">
            <MudText Typo="Typo.body2" style="font-size: small; color: #4242427a; font-weight: 400;">@SendDate.ToString("hh:mm tt")</MudText>
        </MudPaper>
    </MudPaper>
    <MudPaper Elevation="0" class="d-flex flex-column align-center" style="align-self: center;">
        <MudToggleIconButton Toggled="@LikedStatus"
                             ToggledChanged="@HandleLikeToggle"
                             Size="Size.Small"
                             Icon="@Icons.Material.Rounded.FavoriteBorder"
                             ToggledIcon="@Icons.Material.Rounded.Favorite"
                             ToggledColor="@Color.Error"
                            />

        
    </MudPaper>
</MudPaper>

@code {
    @code {
        [Parameter]
        public bool LikedStatus { get; set; } = false;
        [Parameter]
        public string? MessageContent { get; set; }
        [Parameter]
        public int? MessagedId { get; set; }
        [Parameter]
        public DateTime SendDate { get; set; }
        [Parameter]
        public int? ConversationId { get; set; }

        private HubConnection hubConnection;

        protected override async Task OnParametersSetAsync()
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
                .Build();

            hubConnection.On<int>("LikeToggled", (conversationId) =>
            {
                if (conversationId == ConversationId)
                {
                    StateHasChanged();
                }
            });

            await hubConnection.StartAsync();
        }

        private async Task HandleLikeToggle()
        {
            if (MessagedId.HasValue && ConversationId.HasValue)
            {
                await hubConnection.InvokeAsync("ToggleLike", MessagedId, ConversationId);
                LikedStatus = !LikedStatus;
            }
        }
    }


      
}