@page "/chathome"

@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>


<MudGrid style="height: calc(100vh - 64px);" Spacing="0">
    <MudItem lg="2" md="3" xs="5" class="chatlist ">
        <MudPaper Elevation="0" Outlined="false" Square="true" class="py-2 pr-3">
            <MudAppBar Dense="true" Gutters="false" Elevation="0" class="my-appbar" Fixed="false">
                <MudMenu AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                    <ActivatorContent>
                        <MudIconButton style="margin-left: 16px;" class="appbar-icon mr-2" Icon="@Icons.Material.Rounded.Person" />
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem>Profile</MudMenuItem>
                        <MudMenuItem>Contact List</MudMenuItem>
                        <MudMenuItem>Settings</MudMenuItem>
                        <MudMenuItem>Sign Out</MudMenuItem>
                    </ChildContent>
                </MudMenu>
                <MudTextField class="search" Margin="Margin.Dense" Underline="false" @bind-Value="Search" Placeholder="Search..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" />
                <MudIconButton class="appbar-icon ml-2" Icon="@Icons.Material.Outlined.Edit" />
            </MudAppBar>
            <MudPaper Elevation="0" Class="ml-4 d-flex flex-row align-baseline">
                <MudChip Size="Size.Small" T="string" Variant="Variant.Outlined"
                         Color="@((activeContent == 1) ? Color.Primary : Color.Default)"
                         class="@((activeContent == 1) ? "active-button" : "")"
                         OnClick="@(() => HandleClick(1))">
                    Chats
                </MudChip>
                <MudChip Size="Size.Small" T="string" Variant="Variant.Outlined"
                         Color="@((activeContent == 2) ? Color.Primary : Color.Default)"
                         class="@((activeContent == 2) ? "active-button" : "")"
                         OnClick="@(() => HandleClick(2))">
                    Contact
                </MudChip>
                <MudSpacer />
                <MudBadge Content="100" Color="Color.Error" Overlap="true" Class="mx-6 my-4">
                    <MudIconButton OnClick="@(() => HandleClick(1))" Size="Size.Small" Icon="@Icons.Material.Filled.Email" Color="Color.Default" />
                </MudBadge>
            </MudPaper>
            <MudDivider />
            @switch (activeContent)
            {
                case 1:
                    <MudList T="string">
                        @foreach (var conversation in Conversations)
                        {
                            @if (!string.IsNullOrEmpty(conversation.LastMessage))
                            {

                                <MudListItem class="my-1 px-0" Style="border-radius: 14px;" OnClick="() => ChatClicked(conversation)">
                                    <ChatIListItem FirstName="@conversation.FriendFirstName"
                                                   LastName="@conversation.FriendLastName"
                                                   Streak="@conversation.Streak"
                                                   UnreadCount="@conversation.UnreadCount"
                                                   LastMessage="@conversation.LastMessage"
                                                   LastMessageDate="@conversation.LastMessageDate" />
                                </MudListItem>
                            }
                        }

                    </MudList>

                    break;
                case 2:
                    <SearchUserToAdd />
                    <MudDivider />

                    <MudList T="string">
                        @foreach (var contact in Contacts)
                        {
                            <MudListItem class="my-1" Style="border-radius: 14px;" OnClick="() => UpdateChatArea(contact)">
                                <ContactListItem FirstName="@contact.ContactFirstName"
                                                 LastName="@contact.ContactLastName"
                                                 PhoneNumber="@contact.ContactTelephone"
                                                 Email="@contact.ContactEmail" />
                            </MudListItem>

                        }
                    </MudList>

                    break;
            }

        </MudPaper>
    </MudItem>
    <MudItem lg="10" md="9" xs="7" class="chat-item">
        <MudPaper Elevation="0" Outlined="false" Square="true" class="d-flex mud-content">
            <MudIconButton class="chat-nav-arrow" Icon="@Icons.Material.Filled.KeyboardArrowLeft" />
            <MudDivider Vertical="true" FlexItem="true" />
            <MudIconButton class="chat-nav-arrow" Icon="@Icons.Material.Filled.KeyboardArrowRight" />
            <MudSpacer />
            <MudIconButton class="chat-nav-arrow" Icon="@Icons.Material.Filled.Settings" />
        </MudPaper>
        <MudDivider />
        <ChatHeader Email="@HeaderInfo.Email"
                    UserId="@HeaderInfo.UserId"
                    FirstName="@HeaderInfo.FirstName"
                    LastName="@HeaderInfo.LastName"
                    PhoneNumber="@HeaderInfo.PhoneNumber" />
        <MudDivider />
        <ChatMessages ReceiverId="@HeaderInfo.UserId" />
        <MudDivider />
        <ChatInput ReceiverId="@HeaderInfo.UserId" />
    </MudItem>
</MudGrid>
<style>
    .mud-content {
        padding: 8px 12px;
    }

    .chatlist {
        border-right: 1px solid #0000001e;
    }

    .search {
        border: 1px solid #0000001e;
        border-radius: 124px;
        padding-left: 10px;
        padding-right: 8px;
        padding-top: 4px;
    }

    .icon-button {
        height: 34px;
        border: 1px solid #0000001e;
        display: flex;
        border-radius: 124px;
        justify-content: center;
        align-content: center;
    }

    .my-appbar {
        background-color: transparent !important;
        z-index: 1000;
    }

    .appbar-icon {
        height: 33px;
        width: 33px;
        border: 1px solid #0000001e;
    }

    .chat-nav-arrow {
        height: 16px;
        width: 16px;
    }

    .active-button {
        background-color: #594ae20f;
    }
</style>

@code {
    public List<ClientContact>? Contacts { get; set; } = new();
    public List<ClientConversation> Conversations { get; set; } = new();

    public AppUser HeaderInfo { get; set; } = new()
        {
            FirstName = "No Chat Selected",
        };  


    private int activeContent = 1;

    public async Task UpdateChatArea(ClientContact contact)
    {
        HeaderInfo.UserId = contact.UserId;
        HeaderInfo.FirstName = contact.ContactFirstName;
        HeaderInfo.LastName = contact.ContactLastName;
        HeaderInfo.Email = contact.ContactEmail;
        HeaderInfo.PhoneNumber = contact.ContactTelephone;
    }

    public async Task ChatClicked(ClientConversation _conversation)
    {
        HeaderInfo.UserId = _conversation.FriendId;
        HeaderInfo.FirstName = _conversation.FriendFirstName;
        HeaderInfo.LastName = _conversation.FriendLastName;
        HeaderInfo.Email = _conversation.Email;
        HeaderInfo.PhoneNumber = _conversation.PhoneNumber;

        await ChangeReadStatus(_conversation.Id);
        //await SetActiveConversation(_conversation.Id);
    }

    private void HandleClick(int contentId)
    {
        activeContent = contentId;
    }
    private HubConnection? hubConnection;
    private List<string> messages = [];
    private string? userInput;
    private string? messageInput;
    public string? Search { get; set; }
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On("ConversationUpdated", async () =>
      {
      await GetAllConversations();
      await InvokeAsync(StateHasChanged);
      });

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On("ContactCreated", async () =>
       {
           await GetAllContacts();
           await InvokeAsync(StateHasChanged);
       });

        // Existing initialization code...

        hubConnection.On<int>("ConversationStatusChanged", async (conversationId) =>
        {
            // Update the local conversation list to reflect the active status
            await GetAllConversations();
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int>("ReadStatusChanged", async (conversationId) =>
        {
            // Update the local conversation list to reflect the new read status
            await GetAllConversations();
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        await GetAllContacts();
        await GetAllConversations();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    // this gets users
    private async Task GetAllContacts()
    {
        if (hubConnection is not null)
        {
            Contacts = await hubConnection.InvokeAsync<List<ClientContact>>("GetAllUserContacts");
            StateHasChanged();
        }
    }

    public async Task GetAllConversations()
    {
        if (hubConnection is not null)
        {
            Conversations = await hubConnection.InvokeAsync<List<ClientConversation>>("GetAllConversation");
            StateHasChanged();
        }
    }

    public async Task SetActiveConversation(int conversationId)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SetActiveConversation", conversationId);
            StateHasChanged();
        }
    }

    public async Task ChangeReadStatus(int conversationId)
    {
        await hubConnection.SendAsync("ChangeReadStatus", conversationId);
        StateHasChanged();
    }
}